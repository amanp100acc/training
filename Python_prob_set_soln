Problem set 1
----------------------
Q1.
x = 10
y = 7
z = 5
l = [x,y,z]
l1 = []
for i in l:
    if i % 2 != 0:
        l1.append(i)
    else:
        pass
if len(l1) > 0:
    print(l1)
    l1.sort()
    print(l1)
    print(l1[-1])
else:
    print("No odd no. present")

Q2.
def right_justify(s):
    print((70 - len(s)) * ' ',s)

right_justify('Cigna')

Q3.
print("Enter 10 numbers: ")
l = []
for i in range(10):
    x = int(input())
    l.append(x)
l1 = []
for i in l:
    if i % 2 != 0:
        l1.append(i)
    else:
        pass
if len(l1) > 0:
    print(l1)
    l1.sort()
    print(l1)
    print(l1[-1])
else:
    print("No odd no. present")

Q5.
num = int(input("Enter the number: "))
for root in range(10000000000000000000):
    for pwr in range(1,6):
        if num == root ** pwr:
            print(root,pwr)
            exit()
print("No such pair exists")

Q6.
s = '1.23,2.4,3.123'
s1 = s.split(',')
sum = 0
for i in s1:
    sum += float(i)
print(sum)

Q7.
s = 'Hindustan'
s1 = 'hindu'
def isIn(s,s1):
    if (s.lower() in s1.lower() or s1.lower() in s.lower()):
        return True
    else:
        return False
print(isIn(s,s1))

Q8.
def getratios(vect1, vect2):
    l = []
    for i in range(len(vect1)):
        l.append(vect1[i]/vect2[i])
    return l   
vect1 = [20,30,40,50]
vect2 = [2,10,20,5]
print(getratios(vect1,vect2))
----------------------------------------------
Problem Set 2
----------------------------------------------
Q1.
def gcd(a,b):
    if b == 0:
        return a
    else:
        r = a % b
        a = b
        b = r
        return gcd(a,b)
        
print(gcd(184,8))

Q2.
def is_Power(a,b):
    if a == b:
        return True
    if b == 0 or b == 1:
        return False
    return ((a%b == 0) and is_Power(a / b, b))
print(is_Power(16,8))

Q3.
#Recursion
def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n*fact(n -1)
print(fact(5))
#without recursion
def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        n1 = n
        for i in range(1, n):
            nth = n1 * (n - i)
            n1 = nth
        return n1
print(fact(6))

Q4.
x = 10011
s = str(x)
s1 = s[::-1]
sum = 0
for i in range(len(s1)):
    if s1[i] == '1':
        sum += 2 ** i
    else:
        sum += 0
print(sum)
Q5.

Q6.

def findanEven(l):
    try:
        c = 0
        for i in l:
            if i % 2 == 0:
                c = 1
                return i
        if c == 1:
            pass
        else:
            raise ValueError()
    except:
        return "No even numbers in the list"
    
print(findanEven([1,5,3,7]))

Q7.
def isPalindrome(s):
    if s.lower().replace(" ", "") == s[::-1].lower().replace(" ", ""):
        print("True")
    else:
        print("False")
isPalindrome("Ma lay ala m")

Q8.
def eval_loop(l):
    x = input("Enter the expression: ")
    if x == 'Done':
        print(l[-1])
    else:
        y = eval(x)
        print(y)
        l.append(y)
        eval_loop(l)
l = []
eval_loop(l)
--------------------------------
Problem Set 3
--------------------------------
Q2.
import string

def Rotate_word(str_, num_):
    # Create a translation table from lowercase characters to shifted lowercase chars
    tab = str.maketrans(string.ascii_lowercase, 
                        string.ascii_lowercase[num_:] + string.ascii_lowercase[:num_])
    return str_.translate(tab)

str_ =input("Enter a string: ")
num_ = int(input("Enter rotate number: "))
print(Rotate_word(str_,num_))

Q3,Q4.
def has_no_e(l):
    c = 0
    for i in l:
        if 'e' not in i.lower():
            print(i)
            c += 1
        else:
            c += 0
    x = c * 100 / len(l)
    return x
print(has_no_e(['araam', 'de', 'kahan', 'hai', 'BETA', 'Ego']))

Q5.
def avoids(w, s):
    c = 0
    for i in s:
        if i.lower() not in w.lower():
            pass
        else:
            c += 1
    if c == 0:
        return True
    else:
        return False
        
print(avoids('Mahatma', 'bcd'))

Q6.
def avoids(l, s):
    c = 0
    for j in l: 
        for i in s:
            if i.lower() not in j.lower():
                pass
            else:
                c += 1
    if c == 0:
        return True
    else:
        return False
        
l = ['harsh', 'aman', 'Aashish', 'Akash']
s = input("Enter the string of forbidden letters: ")
print(avoids(l,s))

Q7.
def using_only(w, s):
    c = 0
    for i in w.replace(' ', ''):
        if i.lower() in s.lower():
            pass
        else:
            c += 1
    if c == 0:
        return True
    else:
        return False

print(using_only("Hoe alfalfa", 'acefhlo'))

Q8.
def is_abecedarian(s):
    c = 0
    a = ord(s[0].lower())
    for i in range(1, len(s)):
        if ord(s[i].lower()) >= a:
            a = ord(s[i].lower())
            continue
        else:
            c += 1
    if c == 0:
        return True
    else:
        return False
        
print(is_abecedarian("Abhor"))

Q9.
def is_sorted(l):
    c = 0
    a = l[0]
    for i in range(1, len(l)):
        if l[i] >= a:
            a = l[i]
            continue
        else:
            c += 1
    if c == 0:
        return True
    else:
        return False
        
print(is_sorted(['b','a']))

Q10.
def is_anagram(s1, s2):
    if sorted(s1.lower()) == sorted(s2.lower()):
        return True
    else:
        return False
print(is_anagram("Saloon", 'aloons'))

-----------------------------------------
Problem Set 4
-----------------------------------------

Q1.
class shape:
    def area(self):
        return 0 
class square(shape):
    def __init__(self,length):
        self.length = length
    def area(self):
        return (self.length * self.length)

a = square(5)
b = shape()
print(a.area())
print(b.area())

Q2.
class Person:
    def getgender(self):
        pass
class Male(Person):
    def getgender(self):
        return "Male"
class FeMale(Person):
    def getgender(self):
        return "FeMale"

c = Person()
a = Male()
b = FeMale()
print(a.getgender())
print(b.getgender())
print(c.getgender())

Q3. Prime numbers between two numbers.

def prime(a, b):
    for i in range(a, b + 1):
        if i==1 or i==2 or i==3:
            print(i)
            continue
        else:
            for j in range(2, i):
                if i % j != 0:
                    f = 1
                    continue
                else:
                    f = 0
                    break
            if f == 1:
                print(i)
                    
prime(2,31)

Q7.
class Temperature:
    def __init__(self,temperature):
        self.temperature = temperature
    def _str__(self):
        pass
    def convertToFahren(self):
        pass
    def convertToKelvin(self):
        pass
    def convertToCelsius(self):
        pass
class Celsius(Temperature):
    def _str__(self):
        return ('%s degrees Celsius'%self.temperature)
    def aboveFreezing(self):
        if self.temperature > 0:
            return True
    def convertToFahren(self):
        x = (self.temperature * 9 / 5) + 32
        return x
    def convertToKelvin(self):
        y = self.temperature + 273.15
        return y
    def convertToCelsius(self):
        return self.temperature
class Fahrenheit(Temperature):
    def _str__(self):
        return ("%s degrees Fahrenheit"%self.temperature)
    def aboveFreezing(self):
        if self.temperature > 32:
            return True
    def convertToFahren(self):
        return self.temperature
    def convertToKelvin(self):
        y = (self.temperature -32) * 5 / 9 + 273.15
        return y
    def convertToCelsius(self):
        x = (self.temperature -32) * 5 / 9
        return x
class Kelvin(Temperature):
    def _str__(self):
        return ("%s degrees Kelvin"%self.temperature)
    def aboveFreezing(self):
        if self.temperature > 273.15:
            return True
    def convertToFahren(self):
        x = (self.temperature - 273.15) * 9 / 5 + 32
        return x
    def convertToKelvin(self):
        return self.temperature
    def convertToCelsius(self):
        y = self.temperature - 273.15
        return y

t1 = Celsius(27)
t2 = Fahrenheit(98)
t3 = Kelvin(54)
print(t1.convertToCelsius())
print(t1.convertToKelvin())
print(t1.convertToFahren())
print(t1._str__())
print(t1.aboveFreezing())
print(t2.convertToCelsius())
print(t2.convertToKelvin())
print(t2.convertToFahren())
print(t2._str__())
print(t2.aboveFreezing())
print(t3.convertToCelsius())
print(t3.convertToKelvin())
print(t3.convertToFahren())
print(t3._str__())
print(t3.aboveFreezing())




        



