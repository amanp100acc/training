Q1. Write a recursive function which accepts two arguments in which first argument is the starting number and the next argument
is the number of next even integers to be printed. Also if the first argument is odd, the output should start from the next even number. 
------------------------------------------------------------------------
def even(s,n):
    if n != 0:
        s = s + 2
        n = n - 1
        print(s)
        even(s,n)
    else:
        return
    
even(0, 10)             //starting from even no.
--------------------------------------------------------------------------
def even(s,n):
    if s % 2 != 0:
        s -= 1
        even(s,n)
    else:
        if n != 0:
            s = s + 2
            n = n - 1
            print(s)
            even(s,n)
        else:
            return    
even(3, 10)               //starting from odd no.

------------------------------------------------------------------------------
def odd(s,n):
    if s % 2 == 0:
        s -= 1
        odd(s,n)
    else:
        if n != 0:
            s = s + 2
            n = n - 1
            print(s)
            odd(s,n)
        else:
            return
    
odd(0, 10)                  //Code to print odd nos. even if starting from even no.

------------------------------------------------------------------------------------
Q2.
Q1 solved without using recursive fn.
-------------------------------------------------------------------------------------
def even(s,n):
    while n != 0:
        if s % 2 != 0:
            s += 1
            n -= 1
            print(s)
        else:
            s += 2
            n -= 1
            print(s)
even(1,10)
--------------------------------------------------------------------------------------
def odd(s,n):
    while n != 0:
        if s % 2 == 0:
            s += 1
            n -= 1
            print(s)
        else:
            s += 2
            n -= 1
            print(s)
odd(0,10)
--------------------------------------------------------------------------------------
Q3.
Print the triangle of stars with a python code.

def star(t, n = 1):
    while t != 0:
        print(' ' * (t - 1), '* ' * n)
        t -= 1
        n += 1
        
star(5)

def star(t, n = 1):
    if t != 0:
        print(' ' * (t - 1), '* ' * n)
        t -= 1
        n += 1
        star(t,n)
-------------------------------------------------------------------------------
Q4.
Print Fibonacci series with and without recursion.
-------------------------------------------------------------------------------
Recursion:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return (fib(n-1) + fib(n - 2))

n = int(input("Enter the No. of elements you want in fibonacci series: "))
if n <= 0:
    print("Enter a number greater than 0")
else:
    for i in range(n):
        print(fib(i))
---------------------------------------------------------------------------------
Without recursion:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        n1 = 0
        n2 = 1
        while n != 1:
            n3 = n1 + n2
            n1,n2 = n2,n3
            n -= 1
        return n3

n = int(input("Enter the No. of elements you want in fibonacci series: "))
if n <= 0:
    print("Enter a number greater than 0")
else:
    for i in range(n):
        print(fib(i))
---------------------------------------------------------------------------
Q5.
Find factorial of a number with and without recursion.
---------------------------------------------------------------------------
Recursion:

def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        return (n * fact(n - 1))

print(fact(5))

Without recursion:

def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        n1 = n
        for i in range(1, n):
            nth = n1 * (n - i)
            n1 = nth
        return nth
            
print(fact(5))
--------------------------------------------------------------------------------
Q6.
Print the rhombus of stars with a python code.
--------------------------------------------------------------------------------

def star(t):
    for i in range(1 , t + 1):
        print(" " * (t - i) , '* ' * i)
    for i in range(1, t + 1):
        print(" " * i, '* ' * (t - i))
        
        
n = int(input("Enter the diagonal length of your rhombus: "))
star(n)
--------------------------------------------------------------------
Q7.
Take a file as input in your program that contains sudoku numbers of a 9*9 grid in horizontal and vertical manner and check if it is
correct. Respond with appropriate messages in both the cases and write the same file in a new file along with the word 'Correct' in the 
last line if it's correct.
------------------------------------------------------------------------

while True:
    prompt = input("\n Hello to Sudoku valitator,"
    "\n \n Please type in the path to your file and press 'Enter': ")
    try:
        sudoku = open(prompt, 'r').readlines()
    except FileNotFoundError:
        print("Wrong file or file path")
    else:
        break
    
sudoku = open(prompt, 'r').readlines()
print(sudoku)

def check(game):
    n = len(game)
    if n < (1):
        return False

    for i in range(0, n):
        horizontal = []
        vertical = []
        for k in range(0, n):

            if game[k][i] in vertical:
                return ("File checked for errors. Your options are wrong!")
            vertical.append(game[k][i])

            if game[i][k] in horizontal:
                return ("File checked for errors. Your options are wrong!")
            horizontal.append(game[i][k])
    return ("File checked for errors. Your options are correct!")
print (check(sudoku))
---------------------------------------------------------------------------------
Q8. Find if the number entered from console is an armstrong number.

def check_armstrong(num, x):
    tmp = num
    sum = 0
    while num != 0:
        digit = num % 10
        sum += digit ** x
        num = num // 10
    if tmp == sum:
        return True
    else:
        return False
num = input("Enter the number: ")
print(check_armstrong(int(num),len(num)))
-----------------------------------------------------------------------
