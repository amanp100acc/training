Q1. Write a recursive function which accepts two arguments in which first argument is the starting number and the next argument
is the number of next even integers to be printed. Also if the first argument is odd, the output should start from the next even number. 
------------------------------------------------------------------------
def even(s,n):
    if n != 0:
        s = s + 2
        n = n - 1
        print(s)
        even(s,n)
    else:
        return
    
even(0, 10)             //starting from even no.
--------------------------------------------------------------------------
def even(s,n):
    if s % 2 != 0:
        s -= 1
        even(s,n)
    else:
        if n != 0:
            s = s + 2
            n = n - 1
            print(s)
            even(s,n)
        else:
            return    
even(3, 10)               //starting from odd no.

------------------------------------------------------------------------------
def odd(s,n):
    if s % 2 == 0:
        s -= 1
        odd(s,n)
    else:
        if n != 0:
            s = s + 2
            n = n - 1
            print(s)
            odd(s,n)
        else:
            return
    
odd(0, 10)                  //Code to print odd nos. even if starting from even no.

------------------------------------------------------------------------------------
Q2.
Q1 solved without using recursive fn.
-------------------------------------------------------------------------------------
def even(s,n):
    while n != 0:
        if s % 2 != 0:
            s += 1
            n -= 1
            print(s)
        else:
            s += 2
            n -= 1
            print(s)
even(1,10)
--------------------------------------------------------------------------------------
def odd(s,n):
    while n != 0:
        if s % 2 == 0:
            s += 1
            n -= 1
            print(s)
        else:
            s += 2
            n -= 1
            print(s)
odd(0,10)
--------------------------------------------------------------------------------------
Q3.
Print the triangle of stars with a python code.

def star(t, n = 1):
    while t != 0:
        print(' ' * (t - 1), '* ' * n)
        t -= 1
        n += 1
        
star(5)

def star(t, n = 1):
    if t != 0:
        print(' ' * (t - 1), '* ' * n)
        t -= 1
        n += 1
        star(t,n)
-------------------------------------------------------------------------------
Q4.
Print Fibonacci series with and without recursion.
-------------------------------------------------------------------------------
Recursion:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return (fib(n-1) + fib(n - 2))

n = int(input("Enter the No. of elements you want in fibonacci series: "))
if n <= 0:
    print("Enter a number greater than 0")
else:
    for i in range(n):
        print(fib(i))
---------------------------------------------------------------------------------
Without recursion:

def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        n1 = 0
        n2 = 1
        while n != 1:
            n3 = n1 + n2
            n1,n2 = n2,n3
            n -= 1
        return n3

n = int(input("Enter the No. of elements you want in fibonacci series: "))
if n <= 0:
    print("Enter a number greater than 0")
else:
    for i in range(n):
        print(fib(i))
---------------------------------------------------------------------------
Q5.
Find factorial of a number with and without recursion.
---------------------------------------------------------------------------
Recursion:

def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        return (n * fact(n - 1))

print(fact(5))

Without recursion:

def fact(n):
    if n == 0 or n == 1:
        return 1
    else:
        n1 = n
        while n != 1:
            n2 = n1 * (n1 - 1)
            n1 = n2
            
            n -= 1
                    return 
print(fact(5))
